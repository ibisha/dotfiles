#####################################################################
# Edit util
#####################################################################
[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = ['<Plug>(EasyAlign)']
hook_add = '''
    " Start interactive EasyAlign in visual mode (e.g. vipga)
    xmap ga <Plug>(EasyAlign)

    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)
'''

#####################################################################
# Fuzzy Finder
#####################################################################

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']
on_cmd = [
  'Files',
  'GFiles',
  'GFiles?',
  'Tags',
  'Commands',
  'Rg',
  'History',
  'Buffers',
]
hook_add = '''
    command! -bang -nargs=* Rg
        \ call fzf#vim#grep(
        \   'rg --column --line-number --hidden --no-heading --color=always --smart-case -g "!.git/*" -- '.shellescape(<q-args>), 1,
        \   fzf#vim#with_preview(), <bang>0)

    fun! FzfOmniFiles()
        let is_git = system('git status')
        if v:shell_error
            :Files
        else
            :GFiles
        endif
    endfun

    nnoremap <C-j><C-j> :Commands<CR>
    nnoremap <C-j><C-h> :History<CR>
    nnoremap <C-j><C-p> :call FzfOmniFiles()<CR>
    nnoremap <C-j><C-g> :Rg<Space>
    nnoremap <C-j><C-b> :Buffers<CR>
    nnoremap <C-j>. :<C-u>Files ~/.dotfiles<CR>
'''

#####################################################################
# Programing util
#####################################################################
[[plugins]]
repo = 'thinca/vim-quickrun'
depends = ['vimproc.vim']
on_ft = ['python', 'go', 'sh']
hook_source = '''
  source ~/.vim/rc/plugins/vimquickrun.rc.vim
'''

[[plugins]]
repo = 'w0rp/ale'
on_ft = ['go', 'python', 'typescript', 'javascript', 'html', 'css', 'markdown', 'make', 'vim']
hook_source = '''
    source ~/.vim/rc/plugins/ale.rc.vim
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

#####################################################################
# Go
#####################################################################
[[plugins]]
repo = 'zchee/deoplete-go'
build = 'make'
on_ft = ['go']
depends = ['deoplete.nvim']
hook_source = '''
    let g:deoplete#sources#go#align_class = 1
    let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
    let g:deoplete#sources#go#gocode_binary = $GOPATH . '/bin/gocode'
    let g:deoplete#sources#go#cgo#sort_algo = 'priority'
    let g:deoplete#sources#go#package_dot = 0
    let g:deoplete#sources#go#pointer = 1
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
build = ':GoUpdateBinaries'
hook_source = '''
  source ~/.vim/rc/plugins/go.rc.vim
'''

#####################################################################
# Python
#####################################################################
[[plugins]]
repo = 'zchee/deoplete-jedi'
depends = ['deoplete.nvim']
on_ft = ['python']
hook_source = '''
    let g:deoplete#sources#jedi#statement_length = 0
    let g:deoplete#sources#jedi#short_types = 0
    let g:deoplete#sources#jedi#show_docstring = 0
    let g:deoplete#sources#jedi#worker_threads = 2
'''

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = ['python']
hook_source = '''
    " Disable auto init
    let g:jedi#auto_initialization = 1
    let g:jedi#auto_vim_configuration = 0

    " Disable auto complesions
    let g:jedi#completions_enabled = 0
    let g:jedi#popup_on_dot = 0
    let g:jedi#smart_auto_mappings = 0
    let g:jedi#show_call_signatures = 0

    " Custom keymap
    let g:jedi#goto_command = "<C-]>"
    let g:jedi#goto_assignments_command = "<Localleader>g"
    let g:jedi#goto_definitions_command = ""
    let g:jedi#documentation_command = "K"
    let g:jedi#usages_command = "<Localleader>n"
    let g:jedi#rename_command = "<Localleader>R"
'''

#####################################################################
# Web
#####################################################################
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'djangohtml']

[[plugins]]
repo = 'alvan/vim-closetag'
on_ft = ['html', 'xhtml', 'javascript', 'typescript', 'javascript.jsx', 'typescript.tsx']
hook_add = '''
  let g:closetag_filenames='*.html'
  let g:closetag_xhtml_filenames='*.jsx,*.tsx,*.vue'
  let g:closetag_filetypes='html'
  let g:closetag_xhtml_filetypes='jsx,tsx,javascript.jsx,typescript.tsx,vue'
  let g:closetag_emptyTags_caseSensitive=1
  let g:closetag_shortcut='>'
'''

#####################################################################
# Markdown
#####################################################################
[[plugins]]
repo = 'mattn/vim-maketable'
on_ft = ['markdown']

#####################################################################
# View
#####################################################################
[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
on_ft = ['markdown']
hook_add = '''
    let g:table_mode_corner = '|'
    let g:table_mode_always_active = 1
    let g:table_mode_syntax = 1
    let g:table_mode_auto_align = 1

    augroup TableCommands
        autocmd!
        autocmd FileType markdown nnoremap <silent><LocalLeader>a :<C-u>TableModeRealign<CR>
        autocmd FileType markdown nnoremap <silent><LocalLeader>t :<C-u>Tableize<CR>
        autocmd FileType markdown vnoremap <silent><LocalLeader>t :<C-u>'<,'>Tableize<CR>
    augroup END
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']
hook_source = '''
    let g:vim_json_syntax_conceal = 0
    let g:indentLine_noConcealCursor = ""
'''

#####################################################################
# Other Util
#####################################################################
