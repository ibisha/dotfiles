##############
# ファイル操作
[[plugins]]
repo = 'Shougo/denite.nvim'
if = 'has("python3")'
on_cmd = 'Denite'
hook_add = '''
  nnoremap [Denite] <Nop>
  nnoremap <leader>u [Denite]
  nnoremap <silent> [Denite]b :<C-u>Denite buffer<CR>
  nnoremap <silent> [Denite]f :<C-u>Denite file_rec<CR>
  nnoremap <silent> [Denite]g :<C-u>Denite grep<CR>
  nnoremap <silent> [Denite]m :<C-u>Denite file_mru<CR>
  nnoremap <silent> [Denite]y :<C-u>Denite neoyank<CR>
  nnoremap <silent> [Denite]<C-d> :<C-u>call denite#start([{'name': 'file_rec', 'args': ['~/dotfiles']}])<CR>
'''
hook_post_source = '''
  " file_rec
  if executable('pt')
      call denite#custom#var('file_rec', 'command', ['pt', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', ''])
  endif

  " grep
  if executable('pt')
      call denite#custom#var('grep', 'command', ['pt', '--nogroup', '--nocolor', '--smart-case', '--hidden'])
      call denite#custom#var('grep', 'default_opts', [])
      call denite#custom#var('grep', 'recursive_opts', [])
  endif

  call denite#custom#source('file_mru', 'matchers', ['matcher_fuzzy', 'matcher_project_files'])
  call denite#custom#source('file_mru', 'converters', ['converter_relative_word'])
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
depends = 'denite.nvim'
on_path = '.*'

[[plugins]]
repo = 'Shougo/neoyank.vim'
depends = 'denite.nvim'
on_event = 'TextYankPost'
 
[[plugins]]
repo = 'scrooloose/nerdtree'
on_path = '.*'
hook_add = '''
    nnoremap <C-e> :<C-u>NERDTreeToggle<CR>
'''

##############
# 入力
[[plugins]]
# 入力補完
repo = 'Shougo/deoplete.nvim'
on_i = 1
hook_add = '''
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#enable_ignore_case = 1
    let g:deoplete#enable_smart_case = 1

    " <TAB>: completion.
    imap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : deoplete#mappings#manual_complete()
    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~ '\s'
    endfunction

    " <S-TAB>: completion back.
    inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
'''

[[plugins]]
repo = 'Shougo/neosnippet'
depends = ['neosnippet-snippets']
on_i = 1
on_ft = ['snippet']
hook_add = '''
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)
    " SuperTab like snippets behavior.
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    " For conceal markers.
    if has('conceal')
      set conceallevel=2 concealcursor=niv
    endif
'''
 
[[plugins]]
# 位置揃え
repo = 'junegunn/vim-easy-align'
on_i = 1
hook_add = '''
    vmap ga <Plug>(EasyAlign)
'''

##############
# Markdown
[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['md']
[[plugins]]
repo = 'kannokanno/previm'
on_ft = ['md']
hook_add = '''
    let g:previm_open_cmd = ''
    nnoremap [previm] <Nop>
    nmap <Space>p [previm]
    nnoremap <silent> [previm]o :<C-u>PrevimOpen<CR>
    nnoremap <silent> [previm]r :call previm#refresh()<CR>
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_source = ['previm']

##############
# HTML
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'eruby']

##############
# python設定 
[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
