#####################################################################
# Edit util
#####################################################################
[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = ['<Plug>(EasyAlign)']
hook_add = '''
    " Start interactive EasyAlign in visual mode (e.g. vipga)
    xmap ga <Plug>(EasyAlign)

    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)
'''

#####################################################################
# Fuzzy Finder
#####################################################################

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']
on_cmd = [
  'Files',
  'GFiles',
  'GFiles?',
  'Tags',
  'Commands',
  'Rg',
  'History',
  'Buffers',
  'Snippets',
  'Maps',
  'Helptags',
]
hook_add = '''
    command! -bang -nargs=* Rg
        \ call fzf#vim#grep(
        \   'rg --column --line-number --hidden --no-heading --color=always --smart-case -g "!.git/*" -- '.shellescape(<q-args>), 1,
        \   fzf#vim#with_preview(), <bang>0)

    fun! FzfOmniFiles()
        let is_git = system('git status')
        if v:shell_error
            :Files
        else
            :GFiles
        endif
    endfun

    nnoremap <C-j><C-j> :Commands<CR>
    nnoremap <C-j><C-h> :History<CR>
    nnoremap <C-j><C-p> :call FzfOmniFiles()<CR>
    nnoremap <C-j><C-g> :Rg<Space>
    nnoremap <C-j><C-b> :Buffers<CR>
    nnoremap <C-j>. :<C-u>Files ~/.dotfiles<CR>
'''

#####################################################################
# Programing util
#####################################################################
[[plugins]]
repo = 'thinca/vim-quickrun'
depends = ['vimproc.vim']
on_ft = ['python', 'go', 'sh']
hook_add = '''
    " Running vimproc
    " Showing success is buffer and error is quickfix
    let g:quickrun_config = {
        \ '_' : {
            \ 'runner' : 'vimproc',
            \ 'runner/vimproc/updatetime' : 40,
            \ 'outputter' : 'error',
            \ 'outputter/error/success' : 'buffer',
            \ 'outputter/error/error'   : 'quickfix',
            \ 'outputter/buffer/split' : ':botright 8sp',
        \ }
    \}

    " Close quickfix is [q]

    augroup MyQuickFixClose
        au FileType qf nnoremap <silent><buffer>q :quit<CR>
    augroup END

    " Keymap
    let g:quickrun_no_default_key_mappings = 1
    " Running with close quickfix and save file
    nnoremap <Leader>r :<C-U>QuickRun<CR>
    xnoremap <Leader>r gv:<C-U>QuickRun<CR>

    " Stop quickrun is [C-c]
    nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

#####################################################################
# Completion
#####################################################################
[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
on_ft = ['python', 'go']
hook_add = '''
    function! s:on_lsp_buffer_enabled() abort
        setlocal omnifunc=lsp#complete
        setlocal signcolumn=yes

        nnoremap <buffer> ]l   :<C-u>LspNextDiagnostics<CR>
        nnoremap <buffer> [l   :<C-u>LspPreviousDiagnostics<CR>
        nnoremap <buffer> gA   :<C-u>LspCodeAction<CR>
        nnoremap <buffer> gd   :<C-u>LspDefinition<CR>
        nnoremap <buffer> gD   :<C-u>LspReferences<CR>
        nnoremap <buffer> gs   :<C-u>LspDocumentSymbol<CR>
        nnoremap <buffer> gS   :<C-u>LspWorkspaceSymbol<CR>
        nnoremap <buffer> gQ   :<C-u>LspDocumentFormat<CR>
        vnoremap <buffer> gQ   :LspDocumentRangeFormat<CR>
        nnoremap <buffer> K    :<C-u>LspHover<CR>
        nnoremap <buffer> <F1> :<C-u>LspImplementation<CR>
        nnoremap <buffer> <F2> :<C-u>LspRename<CR>
    endfunction

    augroup lsp_install
        au!
        autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
    augroup END
    command! LspDebug let lsp_log_verbose=1 | let lsp_log_file = expand('~/lsp.log')

    let g:lsp_diagnostics_enabled = 1
    let g:lsp_diagnostics_echo_cursor = 1
    " let g:asyncomplete_auto_popup = 1
    " let g:asyncomplete_auto_completeopt = 0
    let g:asyncomplete_popup_delay = 200
    let g:lsp_text_edit_enabled = 1
    let g:lsp_preview_float = 1
    let g:lsp_diagnostics_float_cursor = 1
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
on_ft = ['python', 'go']
hook_add = '''
    let g:lsp_settings = {}
    let g:lsp_settings_filetype_go = ['gopls', 'golangci-lint-langserver']
    let g:lsp_settings['gopls'] = {
        \  'workspace_config': {
        \    'usePlaceholders': v:true,
        \  },
        \  'initialization_options': {
        \    'usePlaceholders': v:true,
        \  },
        \}
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
on_ft = ['python', 'go']
depends = ['asyncomplete.vim', 'vim-lsp']

[[plugins]]
repo = 'prabirshrestha/asyncomplete-ultisnips.vim'
if = "has('python3')"
on_ft=['python', 'go']
depends = ['asyncomplete.vim', 'ultisnips']
hook_source = '''
    call asyncomplete#register_source(asyncomplete#sources#ultisnips#get_source_options({
        \ 'name': 'ultisnips',
        \ 'whitelist': ['*'],
        \ 'completor': function('asyncomplete#sources#ultisnips#completor'),
        \ }))
'''

[[plugins]]
repo = 'SirVer/ultisnips'
depends = ['vim-snippets']
hook_add = '''
    let g:UltiSnipsExpandTrigger="<c-e>"
    let g:UltiSnipsJumpForwardTrigger="<c-f>"
    let g:UltiSnipsJumpBackwardTrigger="<c-b>"

    let g:UltiSnipsEditSplit="vertical"
'''

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-buffer.vim'
on_ft = ['autohotkey', 'autoit', 'cfg', 'git', 'go', 'groovy', 'java', 'javascript', 'python', 'snippet', 'toml', 'vim', 'vb', 'xsl']
hook_source = '''
  autocmd vimrc User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
      \ 'name': 'buffer',
      \ 'priority': 5,
      \ 'whitelist': ['*'],
      \ 'completor': function('asyncomplete#sources#buffer#completor'),
      \ }))
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-file.vim'
on_ft = ['autohotkey', 'autoit', 'cfg', 'git', 'go', 'groovy', 'java', 'javascript', 'python', 'snippet', 'toml', 'vim', 'vb', 'xsl']
hook_source = '''
  autocmd vimrc User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
      \ 'name': 'file',
      \ 'priority': 3,
      \ 'whitelist': ['*'],
      \ 'completor': function('asyncomplete#sources#file#completor'),
      \ }))
'''

#####################################################################
# Go
#####################################################################
[[plugins]]
repo = 'mattn/vim-goimports'
on_ft = ['go']

#####################################################################
# Python
#####################################################################
[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = ['python']
hook_source = '''
    " Disable auto init
    let g:jedi#auto_initialization = 1
    let g:jedi#auto_vim_configuration = 0

    " Disable auto complesions
    let g:jedi#completions_enabled = 0
    let g:jedi#popup_on_dot = 0
    let g:jedi#smart_auto_mappings = 0
    let g:jedi#show_call_signatures = 0

    " Custom keymap
    let g:jedi#goto_command = "<C-]>"
    let g:jedi#goto_assignments_command = "<Localleader>g"
    let g:jedi#goto_definitions_command = ""
    let g:jedi#documentation_command = "K"
    let g:jedi#usages_command = "<Localleader>n"
    let g:jedi#rename_command = "<Localleader>R"
'''

#####################################################################
# Web
#####################################################################
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'djangohtml']

[[plugins]]
repo = 'alvan/vim-closetag'
on_ft = ['html', 'xhtml', 'javascript', 'typescript', 'javascript.jsx', 'typescript.tsx']
hook_add = '''
  let g:closetag_filenames='*.html'
  let g:closetag_xhtml_filenames='*.jsx,*.tsx,*.vue'
  let g:closetag_filetypes='html'
  let g:closetag_xhtml_filetypes='jsx,tsx,javascript.jsx,typescript.tsx,vue'
  let g:closetag_emptyTags_caseSensitive=1
  let g:closetag_shortcut='>'
'''

#####################################################################
# Markdown
#####################################################################
[[plugins]]
repo = 'mattn/vim-maketable'
on_ft = ['markdown']

#####################################################################
# View
#####################################################################
[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
on_ft = ['markdown']
hook_add = '''
    let g:table_mode_corner = '|'
    let g:table_mode_always_active = 1
    let g:table_mode_syntax = 1
    let g:table_mode_auto_align = 1

    augroup TableCommands
        autocmd!
        autocmd FileType markdown nnoremap <silent><LocalLeader>a :<C-u>TableModeRealign<CR>
        autocmd FileType markdown nnoremap <silent><LocalLeader>t :<C-u>Tableize<CR>
        autocmd FileType markdown vnoremap <silent><LocalLeader>t :<C-u>'<,'>Tableize<CR>
    augroup END
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']
hook_source = '''
    let g:vim_json_syntax_conceal = 0
    let g:indentLine_noConcealCursor = ""
'''

#####################################################################
# Other Util
#####################################################################
